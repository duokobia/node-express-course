// How JWT works.
// Check to see if username and password exists in the post(login) request. 
// If it exists, the app then generates a new JWT for the user. 
// It then sends back the JWT to the front-end app in order to authorize it
// to make successful "GET" requests.  


// ## 1 ##
// 3 options for validations available
// Mongoose validation to require username and password
// Use Joi package to set up another validation layer
// Use a logic in the controller to check that username and password is provided by the user. 

// ## 2 ##
// Id will normally be generated by the DB. This is just for demo.

// ## 3 ##
// Generate a new token. Remember to never add password in the payload! It is a sensitive information.
// Try to keep payload small(light in weight). The bigger the payload, the more data you send across
// the wire, and the slower it takes a user especially with poor internet connection to get this resource.
// Smaller payload makes the app load resources faster and give user better experience.

require('dotenv').config();
const jwt = require("jsonwebtoken");
const { BadRequest } = require("../errors");
const dotenv = require("dotenv");


const login = async (req, res) => {
    const { username, password } = req.body;
    if(!username || !password) {
        throw new BadRequest("Please provide email and password")
    }; // * 1 *

    const id = new Date().getDate(); // * 2 *
    const token = jwt.sign({ id, username }, process.env.JWT_SECRET, {expiresIn:"30d"}); // * 3 *
    console.log("token", token);
    res.status(200).json({ msg:'user created', token });
};

const dashboard = async (req, res) => {
    console.log(req.user);

    const luckyNumber = Math.floor(Math.random()*100);

    res.status(200).json({
        msg : `Hello, ${req.user.username}`,
        secret: `Here is your authorized data and your lucky number is ${luckyNumber}`
    })
};

module.exports = {
    login,
    dashboard
};



